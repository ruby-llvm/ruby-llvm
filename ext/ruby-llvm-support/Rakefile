require 'rake/clean'
require 'rubygems'
require 'ffi'

require File.expand_path('../../lib/llvm/version', File.dirname(__FILE__))
include LLVM

def check_llvm_config(name)
  actual_version = `#{name} --version`
  actual_version.strip == LLVM_VERSION
rescue Errno::ENOENT
  false
end

def invoke_llvm_config(options)
  variants = %W(llvm-config-#{LLVM_VERSION} llvm-config)

  variants.each do |name|
    if check_llvm_config(name)
      return `#{name} #{options}`.gsub("\n", " ")
    end
  end

  raise RuntimeError, "No valid llvm-config found. Tried: #{variants}"
end

LLVM_CONFIG = invoke_llvm_config('--cxxflags --ldflags')

CXX    = "g++"
SRC    = "support.cpp"
SUPPORT_LIB = FFI.map_library_name("RubyLLVMSupport-#{LLVM_VERSION}")


CLEAN.include(SUPPORT_LIB)

task :default => [:build]

desc "Build the shared library and config module"
task :build => [SUPPORT_LIB, :config]

file SUPPORT_LIB => [SRC] do
  sh "#{CXX} -shared -lLLVM-#{LLVM_VERSION} #{SRC} #{LLVM_CONFIG} -o #{OUTPUT}"
end

MOD_LLVM_CONFIG = File.expand_path('../../lib/llvm/config.rb', File.dirname(__FILE__))
LLVM_CONFIG_OPTS = [
  ['VERSION',       :string, '--version'],
  ['PREFIX',        :string, '--prefix'],
  ['SRC_ROOT',      :string, '--src-root'],
  ['OBJ_ROOT',      :string, '--obj-root'],
  ['BIN_DIR',       :string, '--bindir'],
  ['INCLUDE_DIR',   :string, '--includedir'],
  ['LIB_DIR',       :string, '--libdir'],
  ['CPP_FLAGS',     :array,  '--cppflags'],
  ['C_FLAGS',       :array,  '--cflags'],
  ['CXX_FLAGS',     :array,  '--cxxflags'],
  ['LD_FLAGS',      :array,  '--ldflags'],
  ['LIBS',          :array,  '--libs'],
  ['LIB_NAMES',     :array,  '--libnames'],
  ['LIB_FILES',     :array,  '--libfiles'],
  ['COMPONENTS',    :array,  '--components'],
  ['TARGETS_BUILT', :array,  '--targets-built'],
  ['HOST_TARGET',   :string, '--host-target'],
  ['BUILD_MODE',    :string, '--build-mode'],
]

task :config do
  open(MOD_LLVM_CONFIG, 'w') do |f|
    f.puts '# Generated by ruby-llvm. Please do not change this file by hand.'
    f.puts 'module LLVM'
    f.puts '  module CONFIG'
    LLVM_CONFIG_OPTS.each do |(const, fmt, flag)|
      case fmt
      when :string
        f.puts '    ' << const << ' = ' << invoke_llvm_config(flag).strip.inspect
      when :array
        f.puts '    ' << const << ' = ' << invoke_llvm_config(flag).strip.split.inspect
      end
    end
    f.puts '  end'
    f.puts 'end'
  end
end
